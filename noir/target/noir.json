{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"4232800769794831606","abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/82XS07DMBCG7SZ9pA8awUWcp9NdF2UBt3CTWGKDEOIAPTpYeBp3cEEoY6m/VDmJ3W9+j8bTlLNB3I6xHSfsuvZ2FOOU/cbOd21bNKpoykrspOjKWmrZ16LMm0ZUqpbHrm5kr3VZlb1oddNrKQvV522eCd1L9h/B5p/tmKAkmPmIcOMJikvJb0RZJ579EfovEocZgJ8DPw7DF3PLOZwu+QzFjdA6/B2jjb3m7OcamHMP06OdW3x97thwvbXXCeKFqA3XE3VuHzz+IdbK7vWA9urmnpN5kUdfHdHx83OdToPw67P/WRj+DvjzMPwe+Isw/BL4SRB+oYC/DOP/fBZXYfgV8Ndh+C3wN0H4soP+CX0SYjA29I6t85yuj2UZR/EYu+xTDMVfIq/U7wwcxQM/OD/QayF3qcdr6pnDPTj1xEk9cXysmJA1JWTNCFlzQtaCkEWZ++RGfS0JWZQ1sSJkrQlZt1pf8Lvhew802ttRjBRH3l2vvt5pcg995+395fWDIbkg7hiG+wmai50kuOuiKzz2B597WEamAOHQxqfLOHv7XIyQbL6TaRRZ/pQN+3AVO/Pu+id77x5iGOMRPrVUmS6UVpXqurJV94hv5P4R+QT6m9IS/hAAAA==","debug_symbols":"ndPfaoMwGAXwd8m1FyZfvqh9lVJKatMSCFFSHYziuy/x1K5jDEZvPP47P0Ni7uLsTvP16ONluInd/i5OyYfgr8cw9HbyQ8x376IuB2nETlZCNogW0a2haoREKAQhNIIRUBQUBUVBISgEhaAQFIJCUAgKQSEoBEVD0VA0FA1FQ9FQNBQNRUPRUBgKQ2EoDIWhMBSGwlAYCkMxUAwUA8VAMVlRORiRFbUsldgm/jgl58q8v6xEXp/RJhcnsYtzCJX4sGFeX7qNNq452ZSf1pVw8ZwzgxcfXDlbqu92/Xe17eSj3Cl61pX6b7/RzaPftPUbfdls35cdP/v8c/z0zvgP+cr2Pv36t/VSuOTtKbhyr7Tm2G+v5Mvpc9yebBtkTEPvznNyhXvZJfm4N23V0GEpn/wC","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"use dep::std;\n\nfn main() {\n     //let hash_secret: Field = std::hash::hash_to_field([secret]);\n       let expected_secret: Field = std::hash::hash_to_field([1337,42]);\n\n  println(expected_secret)\n     //hash_secret.assert_eq(coupon);\n}\n\n#[test]\nfn test_main() {\n  let expected_secret: Field = std::hash::hash_to_field([1337,42]);\n\n  println(expected_secret)\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/eddy/Projects/amm-proof/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}