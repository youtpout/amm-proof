{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"11768207330701452097","abi":{"parameters":[{"name":"coupon","type":{"kind":"field"},"visibility":"public"},{"name":"user","type":{"kind":"field"},"visibility":"public"},{"name":"once","type":{"kind":"field"},"visibility":"public"},{"name":"fee","type":{"kind":"field"},"visibility":"public"},{"name":"secret0","type":{"kind":"field"},"visibility":"private"},{"name":"secret1","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"3887441833480942226":{"error_kind":"string","string":"Incorrect secret"},"14613855438306196385":{"error_kind":"string","string":"Incorrect coupon"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"use dep::std::{self};\n\nfn main(\n    coupon: pub Field,\n    user: pub Field,\n    once: pub Field,\n    fee: pub Field,\n    secret0: Field,\n    secret1: Field,\n) {\n    let hash_secret: Field = std::hash::hash_to_field([secret0, secret1]);\n    let expected_secret: Field = 0x29cc38a38450970d467f7e60428805a67bd687eff454e0cf8ef773ae2c210fe7;\n    assert(hash_secret == expected_secret, \"Incorrect secret\");\n\n    let hash_data: Field = std::hash::hash_to_field([user, once, fee, expected_secret]);\n    println(hash_data);\n    assert(hash_data == coupon, \"Incorrect coupon\");\n}\n\n#[test]\nfn test_main() {\n    let secret0= 1337;\n    let secret1: Field = 42;\n    let expected_secret: Field = std::hash::hash_to_field([1337, 42]);\n\n    let user: Field = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    let once: Field = 1;\n    // 0,1% fees\n    let fee: Field = 100;\n\n    let coupon: Field = std::hash::hash_to_field([user, once, fee, expected_secret]);\n\n    main(coupon, user, once, fee, secret0, secret1);\n\n}\n\n#[test(should_fail_with = \"Incorrect secret\")]\nfn test_secret() {\n    let secret0= 1337;\n    let secret1: Field = 42;\n    let expected_secret: Field = std::hash::hash_to_field([secret0, secret1]);\n\n    let user: Field = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    let once: Field = 1;\n    // 0,1% fees\n    let fee: Field = 100;\n\n    let coupon: Field = std::hash::hash_to_field([user, once, fee, expected_secret]);\n\n    main(coupon, user, once, fee, 12, secret1);\n\n}\n\n\n#[test(should_fail_with = \"Incorrect coupon\")]\nfn test_coupon() {\n    let secret0= 1337;\n    let secret1: Field = 42;\n    let expected_secret: Field = std::hash::hash_to_field([13377, 42]);\n\n    let user: Field = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    let once: Field = 1;\n    // 0,1% fees\n    let fee: Field = 100;\n\n    let coupon: Field = std::hash::hash_to_field([user, 0, fee, expected_secret]);\n\n    main(coupon, user, once, fee, secret0, secret1);\n\n}","path":"/Users/eddy/Projects/amm-proof/noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_to_radix","directive_invert","directive_integer_quotient"]}